# This is a SecretProviderClass example using user-assigned identity to access your key vault
# Service Connector sets up the Azure resource connection, users only need create the SecretProviderClass and workload resources
# For the variables to fill in, you may get their values from Service Connector Azure Portal

# Tne secretObjects section will create a Secret object on the fly when a POD references a secret called "foosecret".
# The objects section is used to create the secrets as files in the file system of the pod.

apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: sc-demo-keyvault-csi
spec:
  provider: azure
  secretObjects:                              # [OPTIONAL] SecretObjects defines the desired state of synced Kubernetes secret objects
  - data:
    - key: ExampleSecret                           # data field to populate
      objectName: ExampleSecret               # name of the mounted content to sync; this could be the object name or the object alias
    secretName: foosecret                     # name of the Kubernetes secret object   
    type: Opaque                          
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"                        # Set to true for using managed identity
    userAssignedIdentityID: 1f8baf89-54da-4bcd-af72-5ac544264497  # Set the clientID of the user-assigned managed identity to use
    keyvaultName: dx25vault2                 # Set to the name of your key vault
    objects:  |
      array:
        - |
          objectName: ExampleSecret           # keyvault secret name
          objectType: secret   
    tenantId: 16b3c013-d300-468d-ac64-7eda0820b6d3                # The tenant ID of the key vault
